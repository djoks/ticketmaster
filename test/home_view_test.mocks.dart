// Mocks generated by Mockito 5.4.5 from annotations
// in ticketmaster/test/home_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ticketmaster/models/event.dart' as _i3;
import 'package:ticketmaster/ui/views/home/home_view_model.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HomeViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeViewModel extends _i1.Mock implements _i2.HomeViewModel {
  MockHomeViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set keyword(String? _keyword) => super.noSuchMethod(
    Invocation.setter(#keyword, _keyword),
    returnValueForMissingStub: null,
  );

  @override
  List<_i3.Event> get items =>
      (super.noSuchMethod(Invocation.getter(#items), returnValue: <_i3.Event>[])
          as List<_i3.Event>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasMore =>
      (super.noSuchMethod(Invocation.getter(#hasMore), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<List<_i3.Event>> fetchItems({required int? page}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchItems, [], {#page: page}),
            returnValue: _i4.Future<List<_i3.Event>>.value(<_i3.Event>[]),
          )
          as _i4.Future<List<_i3.Event>>);

  @override
  _i4.Future<void> loadMore({bool? reset = false}) =>
      (super.noSuchMethod(
            Invocation.method(#loadMore, [], {#reset: reset}),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
